Git Commands:
=============

	"All commands must start with *git* ".

1. git --version:
    ------------------
	- Prints the version of the git present in the system

2. git status:
    --------------
	- Always gives you information about your working directory.
	- here working directory refers to the project folder we are working on.
	
	- Without any repositories, this command gives an error (without .git in 	   the folder)

	- Example:
	  -------------
		C:\Users\JYOTHSNA\Desktop\Git>git status
		fatal: not a git repository (or any of the parent directories): .git

3. git init:
    ----------
	- Used to initialize the Git repository in the folder. (.git - hidden file)

	- Example:
	  -------------
		C:\Users\JYOTHSNA\Desktop\Git>git init
		Initialized empty Git repository in C:/Users/JYOTHSNA/Desktop/Git/.git/


4. git add:
    -------------
	- This command is used to add files to the staging area.
	- This command can be written in many ways

		Syntax:
		-----------
			git add filename.ext    (for adding one file)

			git add filename1.ext, filename2.ext, ......   (for multiple files)

			git add .       (adds all the files in the folder)


5. git commit:
    -----------------
	- Used to commit the files.

	Syntax:
	----------
		git commit -m "Message in quotes"

	- Inorder to commit, we have to add account credentials.
	- This can be done by using the following commands:
		
		i. git config --global user.email "EmailID"

		ii. git config --global user.name "Name"


6. git log:
    ---------
	- Gives information about the commits done to the project.
	- It also displays a lot of other information.


7. git checkout:
    ------------------
	- Used to jump to particular commit or branch
	
	Syntax:
		git checkout commitID

			(or)

		git checkout branchname

8. git branch:
    ----------------
	- Displays all the branches in the project


	Syntax:
		git branch branchname     ------> creates a new branch

	
	* No need "" for the name of the branch as in the commit command
	* There must not be spaces in the branch name


## Note:
     ---------

	* Creating a new branch in a simple way

		Syntax:

			git checkout -b branchname

	* This checks for the branch, if exists gives an error that branch already exists.

	* If doesnot exists, then it creates a new branch and switch to it.
 


9. git merge:
    ----------------
	- Used to merge the branches

	Syntax:

		git merge branchname

	here, branchname ---> indicates the branch that is to be merged

	* While executing this command, we must be in the branch to which the files are added.

		Eg: if we want to merge a branch with master branch, then we have to execute this command in master branch



## Understanding HEAD:
     ------------------------------

	- HEAD in any branch refers to the latest commit in it.

	- For example:
		
			commit d45683c6e0d18a0150716a1825981e4197e098db (HEAD -> second_branch)
			Author: Jyothsna <writetojyothsna@gmail.com>
			Date:   Mon Nov 15 14:31:51 2021 +0530

    			Adding second commit


	here, HEAD -> second_branch 

		which means that this commit is the latest commit in the second_branch.


	- Consider another example:

			commit 69d5e06c8119149d04debb150a5477615cf6ab83 (HEAD -> master, third_branch)
			Author: Jyothsna <writetojyothsna@gmail.com>
			Date:   Mon Nov 29 17:58:48 2021 +0530

    			added branches text files

	here, HEAD -> master, third_branch

		which means that this commit is the latest commit in both master, third_branch branches.


## Detached HEAD:
     ------------------------

	* If we want to move back to the command that exists in both the branches, then this commit is called as "Detached commit"

	* The advantage of this detached head is we can to move back to it, as we did in branches

	* We can modify the files, commit the files.



10. git switch   (in latest versions of Git 2.23.0):
      ------------------------------------------------------------
	- This command is used to create and switch between the branches.

	- The difference between the switch and checkout is 

		a. switch is only used for switching between the branches not commits.
		b. but checkout command is used to switch between the branches and commits.

	Syntax:
		
		git switch branchname

		git switch -c branchname   -----> to create a new branch



## Deleting Data:
     ---------------------
	- Deleting the data from the project include

		* Working Directory files (which are already part of previous commit)

		* Unstaged Changes

		* Staged Changes

		* Latest Commits

		* Branches


# Deleting Working Directory Files:
   -----------------------------------------------
	- here, we are going to delete the files from our working directory

	Syntax:
		git ls-files    ------>  This command is used to display the files in our staging area

	- even though we delete our file from our folder, it still exists in our staging area.

	- To delete the file, from our working directory use "rm" command

	Syntax:
		git rm filename

	- After that, we can commit the changes of deleting the file.




# Undoing Unstaged Changes:
   ----------------------------------------
	- Moving back to the previous changes of the files

	- This can be done by using "checkout" command   (for older Git Versions)

	Syntax:
		git checkout filename   -----> move back to the previous commit of the file

			(or)

		git checkout .             ------> move back to the previous commit of all the files in the directory

	- Another command to do this change is "restore" command    (for latest Git Versions 2.23.0)

	Syntax:
		git restore filename    ----> discard the changes of a particular file in working directory

			(or)

		git restore .               ----->  discard the changes of all the files in the directory


     * Removing the untracked files from the directory:
       --------------------------------------------------------------------

	- This can be done by using "clean" command

	Syntax:

		git clean -dn      ------->    this command display the files that are to be removed (just displays the list of files, doesn't delete)
				         here, -d indicates remove the directories or files

		git clean -df      -------->    this command forcely remove the untracked files from the working directory
				         here, -f indicates the git to forcely remove the files




# Undoing Staged Changes:
   -------------------------------------
	- here, we going to undo the changes done to the files that are in the staging area.

	- In older Git Versions, we require 2 commands to done this undoing
		
		a. To bring the staged file to unstaged
		b. Then undo the change

	- To bring the file to unstaged, we use "reset" command

	Syntax:
		git reset filename    -----> brings the file to unstaged change

	- Then undo the change using "checkout" command

	Syntax:
		git checkout filename

	- In lastest Git Versions, the commands to undo the staged changes are "restore", "checkout"

	Syntax:
		git restore --staged filename    -----> this command moves the file from staged to unstaged changes

	- Then apply the checkout command

	Syntax:
		git checkout filename


# git reset:
   ------------
	- the reset commad can be used in many ways.

	Default way of reset command:
	-------------------------------------------

	Syntax:
		git reset HEAD~no.of.commits

	here no.of.commits  -----> is a number, that means the no.of.commits that we want to reset.

	* This command removes the latest commit and also moves the file from staged to unstaged area.

	* But doesn't delete the file.

	
	Soft way of reset command:
	---------------------------------------
	Syntax:
		git reset --soft HEAD~no.of.commits

	* This is the soft reset command, which just deletes the latest commit.

	* The file still exists in the staged area and is not deleted.

	
	Hard way of reset command:
	----------------------------------------
	Syntax:
		git reset --hard HEAD~no.of.commits

	* This is the hard reset command, which removes the latest command and also deletes the file from both staging area and working directory.



## Deleting Branches:
     --------------------------
	- To delete the branches, we use the following commands

		Syntax:
			git branch -d  branchname  ------>    deletes the branches

			
			git branch -D branchname   ------->    deletes the branches force fully even though there are merged

			
			git branch -d  branchname1  branchname2 .....   ------>  to delete multiple branches at a time



## Commiting the "Detached HEAD" Changes:
     --------------------------------------------------------------
	- If we done any changes to the "detached HEAD" mode, then how to get these changes when we switch the branch

	- The solution is to create a new branch, after commiting the changes in the detached HEAD mode

	- And merge this branch with the other branches (of our requirement).



# .gitignore:
   ---------------
	- If our project contains no.of files that are not required in the directory, then we can use ".gitignore"

	- .gitignore helps to ignore the files that are not required. (they can't be committed)

	- This .gitignore file must be created by user manually.

	- For example, if we do not want the "test.log" file then in the .gitignore

		.gitignore file

			test.log

	we can mention the file names that are to be ignored.

	- If we want all the .log files to be ignored, then
	
		.gitignore file

			*.log    

	here, "*" refers to all the log files that are to be ignored.

	- If we want all the .log files to be ignored but except one file (eg. test.log) then

		.gitignore file
			
			*.log
			!test.log

	here, "!" indicates except that file, all the other files are ignored

	- For folders that are to be ignored, we can mention as

		.gitignore file

			foldername/ 

	this ignores all the files in that specified folder.





## git stash:
     --------------
	- This command is used to save the unstaged changes or unsaved commits.

	- For example, if we are working on a project and you have created some file. Consider you did the first commit after some work on the file.
	  Later, you added some work to the file and after some time, you want to go back to the previous commit but the latest changes must be                    saved. This can be done by "stash" command

	Syntax:
			git stash    ------>    saves the unstaged changes


			git stash push -m "Message"    -----> pushes the unstaged changes to the list, with a message

		
			git stash list       ----->   prints the list of stashes that are stored


			git stash apply    ------>  this takes to the previous commit of our project


			git stash drop <index>    ------>   removes particular stash from the list and merge it with the commit


			git stash clear    ------>   to clear the stashes that are saved







## git reflog:
     --------------
	- Used to get back the deleted commits or branches.

	Syntax:
		
		git reflog     ----->   displays all the details of the deleted commits and branches

	- To get back the deleted commit, first copy the id of that particular commit from "reflog"

	- Use "reset" command to get the commit

		git reset --hard <id>

	- Similarly, we do it for the branch, but additionally we have to create a new branch after the checkout.





## Deep dive of "merge" command:
     --------------------------------------------------
	- There are different types of merges
		
		a. Fast-Forward Merge
		b. Non Fast-Forward Merge
			(i)  Recursive
			(ii) Ours
			(iii)Octopus
			(iv)Subtree


	Fast-Forward Merge type:
	------------------------------------
		- This type of merge is applied by the git, when there are no new commits done to the master branch.
		
		- When we apply merge command to merge a new branch and master branch, the git simply moves the HEAD forward to the new                                      commit created in the new branch.

		- But it doesn't create a new commit after merging the branches.


		Syntax:
			git merge <branchname>

		- For example, if we have 3 or 4 commits in the new branch and we performed fast-forward merge.
	
		- Then in the master branch, we get all the commits that are in the master branch and the HEAD points to both master & new branch

		- If we want all the commits of the new branch in only one commit in the master branch, then we can use "squash" 

		Syntax:
			git merge --squash "message"

		- This combines all the commits of the new branch but it doesn't create a new commit.

		- We have to create a new commit, to show the change.

   
	